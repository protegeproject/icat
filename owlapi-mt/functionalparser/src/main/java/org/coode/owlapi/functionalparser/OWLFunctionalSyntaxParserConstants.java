/* Generated By:JavaCC: Do not edit this line. OWLFunctionalSyntaxParserConstants.java */
package org.coode.owlapi.functionalparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OWLFunctionalSyntaxParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_START = 5;
  /** RegularExpression Id. */
  int STRING_LITERAL_START = 8;
  /** RegularExpression Id. */
  int STRINGLITERAL = 10;
  /** RegularExpression Id. */
  int OPENPAR = 12;
  /** RegularExpression Id. */
  int CLOSEPAR = 13;
  /** RegularExpression Id. */
  int ONTOLOGY = 14;
  /** RegularExpression Id. */
  int LABEL = 15;
  /** RegularExpression Id. */
  int IMPORT = 16;
  /** RegularExpression Id. */
  int COMMENT = 17;
  /** RegularExpression Id. */
  int SUBCLASSOF = 18;
  /** RegularExpression Id. */
  int LANGIDENTIFIER = 19;
  /** RegularExpression Id. */
  int EQUIVALENTCLASSES = 20;
  /** RegularExpression Id. */
  int DISJOINTCLASSES = 21;
  /** RegularExpression Id. */
  int DISJOINTUNION = 22;
  /** RegularExpression Id. */
  int ANNOTATION = 23;
  /** RegularExpression Id. */
  int ANNOTATIONPROPERTY = 24;
  /** RegularExpression Id. */
  int ANNOTATIONASSERTION = 25;
  /** RegularExpression Id. */
  int SUBANNOTATIONPROPERTYOF = 26;
  /** RegularExpression Id. */
  int ANNOTATIONPROPERTYDOMAIN = 27;
  /** RegularExpression Id. */
  int ANNOTATIONPROPERTYRANGE = 28;
  /** RegularExpression Id. */
  int HASKEY = 29;
  /** RegularExpression Id. */
  int DECLARATION = 30;
  /** RegularExpression Id. */
  int DOCUMENTATION = 31;
  /** RegularExpression Id. */
  int CLASS = 32;
  /** RegularExpression Id. */
  int OBJECTPROP = 33;
  /** RegularExpression Id. */
  int DATAPROP = 34;
  /** RegularExpression Id. */
  int NAMEDINDIVIDUAL = 35;
  /** RegularExpression Id. */
  int DATATYPE = 36;
  /** RegularExpression Id. */
  int DATAONEOF = 37;
  /** RegularExpression Id. */
  int DATAUNIONOF = 38;
  /** RegularExpression Id. */
  int DATAINTERSECTIONOF = 39;
  /** RegularExpression Id. */
  int OBJECTONEOF = 40;
  /** RegularExpression Id. */
  int OBJECTUNIONOF = 41;
  /** RegularExpression Id. */
  int OBJECTHASVALUE = 42;
  /** RegularExpression Id. */
  int OBJECTINVERSEOF = 43;
  /** RegularExpression Id. */
  int INVERSEOBJECTPROPERTIES = 44;
  /** RegularExpression Id. */
  int DATACOMPLEMENTOF = 45;
  /** RegularExpression Id. */
  int DATATYPERESTRICTION = 46;
  /** RegularExpression Id. */
  int DATATYPEDEFINITION = 47;
  /** RegularExpression Id. */
  int OBJECTINTERSECTIONOF = 48;
  /** RegularExpression Id. */
  int OBJECTCOMPLEMENTOF = 49;
  /** RegularExpression Id. */
  int OBJECTALLVALUESFROM = 50;
  /** RegularExpression Id. */
  int OBJECTSOMEVALUESFROM = 51;
  /** RegularExpression Id. */
  int OBJECTHASSELF = 52;
  /** RegularExpression Id. */
  int OBJECTMINCARDINALITY = 53;
  /** RegularExpression Id. */
  int OBJECTMAXCARDINALITY = 54;
  /** RegularExpression Id. */
  int OBJECTEXACTCARDINALITY = 55;
  /** RegularExpression Id. */
  int DATAALLVALUESFROM = 56;
  /** RegularExpression Id. */
  int DATASOMEVALUESFROM = 57;
  /** RegularExpression Id. */
  int DATAHASVALUE = 58;
  /** RegularExpression Id. */
  int DATAMINCARDINALITY = 59;
  /** RegularExpression Id. */
  int DATAMAXCARDINALITY = 60;
  /** RegularExpression Id. */
  int DATAEXACTCARDINALITY = 61;
  /** RegularExpression Id. */
  int SUBOBJECTPROPERTYCHAIN = 62;
  /** RegularExpression Id. */
  int SUBOBJECTPROPERTYOF = 63;
  /** RegularExpression Id. */
  int EQUIVALENTOBJECTPROPERTIES = 64;
  /** RegularExpression Id. */
  int DISJOINTOBJECTPROPERTIES = 65;
  /** RegularExpression Id. */
  int OBJECTPROPERTYDOMAIN = 66;
  /** RegularExpression Id. */
  int OBJECTPROPERTYRANGE = 67;
  /** RegularExpression Id. */
  int FUNCTIONALOBJECTPROPERTY = 68;
  /** RegularExpression Id. */
  int INVERSEFUNCTIONALOBJECTPROPERTY = 69;
  /** RegularExpression Id. */
  int REFLEXIVEOBJECTPROPERTY = 70;
  /** RegularExpression Id. */
  int IRREFLEXIVEOBJECTPROPERTY = 71;
  /** RegularExpression Id. */
  int SYMMETRICOBJECTPROPERTY = 72;
  /** RegularExpression Id. */
  int ASYMMETRICOBJECTPROPERTY = 73;
  /** RegularExpression Id. */
  int TRANSITIVEOBJECTPROPERTY = 74;
  /** RegularExpression Id. */
  int SUBDATAPROPERTYOF = 75;
  /** RegularExpression Id. */
  int EQUIVALENTDATAPROPERTIES = 76;
  /** RegularExpression Id. */
  int DISJOINTDATAPROPERTIES = 77;
  /** RegularExpression Id. */
  int DATAPROPERTYDOMAIN = 78;
  /** RegularExpression Id. */
  int DATAPROPERTYRANGE = 79;
  /** RegularExpression Id. */
  int FUNCTIONALDATAPROPERTY = 80;
  /** RegularExpression Id. */
  int SAMEINDIVIDUAL = 81;
  /** RegularExpression Id. */
  int DIFFERENTINDIVIDUALS = 82;
  /** RegularExpression Id. */
  int CLASSASSERTION = 83;
  /** RegularExpression Id. */
  int OBJECTPROPERTYASSERTION = 84;
  /** RegularExpression Id. */
  int NEGATIVEOBJECTPROPERTYASSERTION = 85;
  /** RegularExpression Id. */
  int DATAPROPERTYASSERTION = 86;
  /** RegularExpression Id. */
  int NEGATIVEDATAPROPERTYASSERTION = 87;
  /** RegularExpression Id. */
  int PREFIX = 88;
  /** RegularExpression Id. */
  int LENGTH = 89;
  /** RegularExpression Id. */
  int MINLENGTH = 90;
  /** RegularExpression Id. */
  int MAXLENGTH = 91;
  /** RegularExpression Id. */
  int PATTERN = 92;
  /** RegularExpression Id. */
  int MININCLUSIVE = 93;
  /** RegularExpression Id. */
  int MAXINCLUSIVE = 94;
  /** RegularExpression Id. */
  int MINEXCLUSIVE = 95;
  /** RegularExpression Id. */
  int MAXEXCLUSIVE = 96;
  /** RegularExpression Id. */
  int TOTALDIGITS = 97;
  /** RegularExpression Id. */
  int FRACTIONDIGITS = 98;
  /** RegularExpression Id. */
  int DLSAFERULE = 99;
  /** RegularExpression Id. */
  int BODY = 100;
  /** RegularExpression Id. */
  int HEAD = 101;
  /** RegularExpression Id. */
  int CLASSATOM = 102;
  /** RegularExpression Id. */
  int DATARANGEATOM = 103;
  /** RegularExpression Id. */
  int OBJECTPROPERTYATOM = 104;
  /** RegularExpression Id. */
  int DATAPROPERTYATOM = 105;
  /** RegularExpression Id. */
  int BUILTINATOM = 106;
  /** RegularExpression Id. */
  int SAMEINDIVIDUALATOM = 107;
  /** RegularExpression Id. */
  int DIFFERENTINDIVIDUALSATOM = 108;
  /** RegularExpression Id. */
  int VARIABLE = 109;
  /** RegularExpression Id. */
  int DGRULE = 110;
  /** RegularExpression Id. */
  int DESCRIPTIONGRAPH = 111;
  /** RegularExpression Id. */
  int NODES = 112;
  /** RegularExpression Id. */
  int NODEASSERTION = 113;
  /** RegularExpression Id. */
  int EDGES = 114;
  /** RegularExpression Id. */
  int EDGEASSERTION = 115;
  /** RegularExpression Id. */
  int MAINCLASSES = 116;
  /** RegularExpression Id. */
  int EQUALS = 117;
  /** RegularExpression Id. */
  int INT = 118;
  /** RegularExpression Id. */
  int FULLIRI = 119;
  /** RegularExpression Id. */
  int PNAME_NS = 120;
  /** RegularExpression Id. */
  int PN_LOCAL = 121;
  /** RegularExpression Id. */
  int PNAME_LN = 122;
  /** RegularExpression Id. */
  int PN_PREFIX = 123;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 124;
  /** RegularExpression Id. */
  int PN_CHARS = 125;
  /** RegularExpression Id. */
  int PN_CHARS_U = 126;
  /** RegularExpression Id. */
  int NODEID = 127;
  /** RegularExpression Id. */
  int ERROR = 128;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;
  /** Lexical state. */
  int IN_STRING_LITERAL = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "\"//\"",
    "<token of kind 6>",
    "\"\\n\"",
    "\"\\\"\"",
    "\"\\\\\\\"\"",
    "\"\\\"\"",
    "<token of kind 11>",
    "\"(\"",
    "\")\"",
    "\"Ontology\"",
    "\"Label\"",
    "\"Import\"",
    "\"Comment\"",
    "\"SubClassOf\"",
    "\"@\"",
    "\"EquivalentClasses\"",
    "\"DisjointClasses\"",
    "\"DisjointUnion\"",
    "\"Annotation\"",
    "\"AnnotationProperty\"",
    "\"AnnotationAssertion\"",
    "\"SubAnnotationPropertyOf\"",
    "\"AnnotationPropertyDomain\"",
    "\"AnnotationPropertyRange\"",
    "\"HasKey\"",
    "\"Declaration\"",
    "\"Documentation\"",
    "\"Class\"",
    "\"ObjectProperty\"",
    "\"DataProperty\"",
    "\"NamedIndividual\"",
    "\"Datatype\"",
    "\"DataOneOf\"",
    "\"DataUnionOf\"",
    "\"DataIntersectionOf\"",
    "\"ObjectOneOf\"",
    "\"ObjectUnionOf\"",
    "\"ObjectHasValue\"",
    "\"ObjectInverseOf\"",
    "\"InverseObjectProperties\"",
    "\"DataComplementOf\"",
    "\"DatatypeRestriction\"",
    "\"DatatypeDefinition\"",
    "\"ObjectIntersectionOf\"",
    "\"ObjectComplementOf\"",
    "\"ObjectAllValuesFrom\"",
    "\"ObjectSomeValuesFrom\"",
    "\"ObjectHasSelf\"",
    "\"ObjectMinCardinality\"",
    "\"ObjectMaxCardinality\"",
    "\"ObjectExactCardinality\"",
    "\"DataAllValuesFrom\"",
    "\"DataSomeValuesFrom\"",
    "\"DataHasValue\"",
    "\"DataMinCardinality\"",
    "\"DataMaxCardinality\"",
    "\"DataExactCardinality\"",
    "\"ObjectPropertyChain\"",
    "\"SubObjectPropertyOf\"",
    "\"EquivalentObjectProperties\"",
    "\"DisjointObjectProperties\"",
    "\"ObjectPropertyDomain\"",
    "\"ObjectPropertyRange\"",
    "\"FunctionalObjectProperty\"",
    "\"InverseFunctionalObjectProperty\"",
    "\"ReflexiveObjectProperty\"",
    "\"IrreflexiveObjectProperty\"",
    "\"SymmetricObjectProperty\"",
    "\"AsymmetricObjectProperty\"",
    "\"TransitiveObjectProperty\"",
    "\"SubDataPropertyOf\"",
    "\"EquivalentDataProperties\"",
    "\"DisjointDataProperties\"",
    "\"DataPropertyDomain\"",
    "\"DataPropertyRange\"",
    "\"FunctionalDataProperty\"",
    "\"SameIndividual\"",
    "\"DifferentIndividuals\"",
    "\"ClassAssertion\"",
    "\"ObjectPropertyAssertion\"",
    "\"NegativeObjectPropertyAssertion\"",
    "\"DataPropertyAssertion\"",
    "\"NegativeDataPropertyAssertion\"",
    "\"Prefix\"",
    "\"length\"",
    "\"minLength\"",
    "\"maxLength\"",
    "\"pattern\"",
    "\"minInclusive\"",
    "\"maxInclusive\"",
    "\"minExclusive\"",
    "\"maxExclusive\"",
    "\"totalDigits\"",
    "\"fractionDigits\"",
    "\"DLSafeRule\"",
    "\"Body\"",
    "\"Head\"",
    "\"ClassAtom\"",
    "\"DataRangeAtom\"",
    "\"ObjectPropertyAtom\"",
    "\"DataPropertyAtom\"",
    "\"BuiltInAtom\"",
    "\"SameIndividualAtom\"",
    "\"DifferentIndividualsAtom\"",
    "\"Variable\"",
    "\"DescriptionGraphRule\"",
    "\"DescriptionGraph\"",
    "\"Nodes\"",
    "\"NodeAssertion\"",
    "\"Edges\"",
    "\"EdgeAssertion\"",
    "\"MainClasses\"",
    "\"=\"",
    "<INT>",
    "<FULLIRI>",
    "<PNAME_NS>",
    "<PN_LOCAL>",
    "<PNAME_LN>",
    "<PN_PREFIX>",
    "<PN_CHARS_BASE>",
    "<PN_CHARS>",
    "<PN_CHARS_U>",
    "<NODEID>",
    "<ERROR>",
    "\"^^\"",
  };

}
